@model X.PagedList.IPagedList<SantaFeWaterSystem.ViewModels.DisconnectionViewModel>
@using X.PagedList.Mvc.Core
@{
    ViewData["Title"] = "Manage Disconnection";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="~/css/admin-dashboard.css" rel="stylesheet" />

   
    <style>
        .input-group .form-control {
            border-top-left-radius: 8px;
            border-bottom-left-radius: 8px;
        }

        .input-group .btn {
            border-top-right-radius: 8px;
            border-bottom-right-radius: 8px;
        }

        @@media (max-width: 576px) {
            .input-group.w-50 {
                width: 100% !important;
                flex-direction: column;
            }

            .input-group .form-control,
            .input-group .btn {
                width: 100%;
                border-radius: 8px !important;
                margin-bottom: 0.5rem;
            }

        .input-group .btn {
            white-space: nowrap;
        }
        }
    </style>
}

}


<div class="container-fluid">
    <h2 class="page-header">
        <i class="bi bi-plug-fill me-2"></i> Manage Disconnection
    </h2>

    <form method="get" asp-action="Index" class="mb-4">
        <div class="input-group w-50">
            <input type="text" name="searchTerm" value="@ViewBag.SearchTerm" id="searchInput" class="form-control" placeholder="Search consumer name or address..." />
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-search"></i> Search
            </button>
            <button type="button" class="btn btn-outline-secondary" id="clearSearchBtn">
                <i class="bi bi-x-circle"></i> Clear
            </button>
        </div>
    </form>



    @if (!Model.Any())
    {
        <div class="alert alert-success">
            <i class="bi bi-check-circle-fill me-2"></i>No consumers are currently eligible for disconnection.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered table-hover table-disconnection">
                <thead>
                    <tr>
                        <th><i class="bi bi-person-circle"></i> Consumer Name</th>
                        <th><i class="bi bi-geo-alt-fill"></i> Address</th>
                        <th><i class="bi bi-calendar-event-fill"></i> Due Date</th>
                        <th><i class="bi bi-cash-coin"></i> Amount Due</th>
                        <th><i class="bi bi-exclamation-circle-fill"></i> Status</th>
                        <th><i class="bi bi-tools"></i> Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.ConsumerName</td>
                            <td>@item.Address</td>
                            <td>@item.DueDate.ToString("yyyy-MM-dd")</td>
                            <td>@item.AmountDue.ToString("C")</td>
                            <td>@item.Status</td>
                            <td>
                                <a asp-action="Details" asp-route-id="@item.BillingId" class="btn btn-sm btn-info me-1">
                                    <i class="bi bi-eye"></i> View
                                </a>
                                <a asp-action="Notify" asp-route-id="@item.BillingId" class="btn btn-sm btn-warning me-1">
                                    <i class="bi bi-bell-fill"></i> Notify
                                </a>
                                <a asp-action="Reconnect" asp-route-id="@item.BillingId" class="btn btn-sm btn-success">
                                    <i class="bi bi-arrow-clockwise"></i> Reconnect
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-center mt-4">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchTerm = ViewBag.SearchTerm }), new PagedListRenderOptions
   {
       DisplayLinkToFirstPage = PagedListDisplayMode.Always,
       DisplayLinkToLastPage = PagedListDisplayMode.Always,
       DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
       DisplayLinkToNextPage = PagedListDisplayMode.Always,
       MaximumPageNumbersToDisplay = 5,
       UlElementClasses = new[] { "pagination" },
       LiElementClasses = new[] { "page-item" },
       PageClasses = new[] { "page-link" }
   })
            ementClasses = new[] { "page-item" },
       PageClasses = new[] { "page-link" }
   })

        </div>
    }
</div>
@section Scripts {
    <script>
        document.getElementById("clearSearchBtn")?.addEventListener("click", function () {
            const input = document.getElementById("searchInput");
            input.value = "";
            input.form.submit(); // Submit to reset the list
        });
    </script>
}
