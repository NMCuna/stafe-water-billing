@model SantaFeWaterSystem.ViewModels.BillingHistoryViewModel
@using System.Web

@{
    ViewData["Title"] = "Billing History";
    Layout = "~/Views/Shared/_UserLayout.cshtml";

    var searchTerm = Context.Request.Query["searchTerm"];
    var statusFilter = Context.Request.Query["statusFilter"];

    // Build query string for Download PDF link, encode properly
    var query = HttpUtility.ParseQueryString(string.Empty);
    if (!string.IsNullOrEmpty(searchTerm)) query["searchTerm"] = searchTerm;
    if (!string.IsNullOrEmpty(statusFilter)) query["statusFilter"] = statusFilter;
    var queryString = query.ToString();
    var downloadPdfUrl = Url.Action("DownloadBillingHistoryPdf", "User") + (string.IsNullOrEmpty(queryString) ? "" : "?" + queryString);
}

<h2 class="mb-4 fw-bold text-primary">Billing History</h2>

<div class="d-flex flex-wrap justify-content-between align-items-center mb-3 gap-3">
    <form method="get" id="filterForm" class="d-flex gap-2 align-items-center flex-grow-1 flex-wrap">
        <input type="text" name="searchTerm" value="@searchTerm" class="form-control flex-grow-1" placeholder="Search" />
        <select name="statusFilter" class="form-select" style="min-width: 150px;">
            <option value="">All Statuses</option>
            <option value="Paid" selected="@(statusFilter == "Paid")">Paid</option>
            <option value="Unpaid" selected="@(statusFilter == "Unpaid")">Unpaid</option>
            <option value="Pending" selected="@(statusFilter == "Pending")">Pending</option>
            <option value="Overdue" selected="@(statusFilter == "Overdue")">Overdue</option>
        </select>
    </form>

    <a href="@downloadPdfUrl" class="btn btn-outline-primary flex-shrink-0">
        <i class="bi bi-download me-1"></i> Download PDF
    </a>
</div>

@if (Model.Billings != null && Model.Billings.Any())
{
    <div class="row g-3">
        @for (int i = 0; i < Model.Billings.Count; i++)
        {
            var bill = Model.Billings[i];
            ViewData["IsCollapsed"] = (i >= 3);
            @await Html.PartialAsync("_BillingCard", bill)
        }
    </div>



    @if (Model.Billings.Count > 3)
    {
        <div class="text-center mt-3">
            <button id="toggleBillsBtn" class="btn btn-link text-primary">
                Show More <i class="bi bi-chevron-down"></i>
            </button>
        </div>
    }
}
else
{
    <p class="text-muted fst-italic">No billing history found.</p>
}

@section Scripts {
    <script>
        // Auto submit form when inputs change
        const filterForm = document.getElementById('filterForm');
        filterForm.querySelectorAll('input, select').forEach(input => {
            input.addEventListener('change', () => {
                filterForm.submit();
            });
        });

        // Toggle show/hide bills
        document.getElementById('toggleBillsBtn')?.addEventListener('click', function () {
            const hiddenBills = document.querySelectorAll('.collapsible-bill');
            const isHidden = hiddenBills[0]?.classList.contains('d-none');
            hiddenBills.forEach(el => {
                el.classList.toggle('d-none', !isHidden);
            });

            this.innerHTML = isHidden
                ? 'Show Less <i class="bi bi-chevron-up"></i>'
                : 'Show More <i class="bi bi-chevron-down"></i>';
        });
    </script>
}
